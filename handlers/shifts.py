from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db import get_db
from config import SUPER_ADMINS

def register_handlers(bot):
    @bot.message_handler(func=lambda m: m.text == "üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω")
    def show_shift_menu(message: Message):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row(KeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—É"), KeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"))
        kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

    @bot.message_handler(func=lambda m: m.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ–Ω—É")
    def ask_date(message: Message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω:")
        bot.register_next_step_handler(message, show_shifts_by_date)

    def show_shifts_by_date(message: Message):
        date = message.text.strip()
        db = get_db()
        cur = db.cursor()
        cur.execute("""
            SELECT e.name, s.shift FROM shifts s
            JOIN employees e ON s.employee_id = e.id
            WHERE s.date = ?
        """, (date,))
        results = cur.fetchall()
        if results:
            text = f"–°–º–µ–Ω—ã –Ω–∞ {date}:\n"
            for name, shift in results:
                text += f"üë§ {name} ‚Äî {shift}\n"
        else:
            text = "–°–º–µ–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        bot.send_message(message.chat.id, text)

    @bot.message_handler(func=lambda m: m.text == "üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
    def ask_shift_change_date(message: Message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å (–ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(message, ask_shift_change_reason)

    def ask_shift_change_reason(message: Message):
        date = message.text.strip()
        user_id = message.from_user.id
        db = get_db()
        cur = db.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ user_id (–≤—Ä–µ–º–µ–Ω–Ω–æ: –∏—â–µ–º –ø–æ Telegram ID –∫–∞–∫ phone –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        cur.execute("SELECT id FROM employees WHERE phone = ?", (str(user_id),))
        employee = cur.fetchone()
        if not employee:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
            return
        employee_id = employee[0]

        def get_reason(msg: Message):
            reason = msg.text.strip()
            cur.execute("INSERT INTO shift_requests (employee_id, date, reason) VALUES (?, ?, ?)",
                        (employee_id, date, reason))
            db.commit()
            bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
            notify_admins_shift_request(bot, employee_id, date, reason)

        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞:")
        bot.register_next_step_handler(message, get_reason)

    def notify_admins_shift_request(bot, employee_id, date, reason):
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT name FROM employees WHERE id = ?", (employee_id,))
        name = cur.fetchone()[0]

        for admin in SUPER_ADMINS:
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"shift_accept:{employee_id}:{date}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"shift_reject:{employee_id}:{date}")
            )
            bot.send_message(admin, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç {name} –Ω–∞ {date}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("shift_"))
    def handle_shift_callback(call: CallbackQuery):
        action, emp_id, date = call.data.split(":")
        db = get_db()
        cur = db.cursor()

        if action == "shift_accept":
            cur.execute("UPDATE shift_requests SET status = 'approved' WHERE employee_id = ? AND date = ?", (emp_id, date))
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω.")
            bot.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω.", call.message.chat.id, call.message.message_id)
        elif action == "shift_reject":
            cur.execute("UPDATE shift_requests SET status = 'rejected' WHERE employee_id = ? AND date = ?", (emp_id, date))
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            bot.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.", call.message.chat.id, call.message.message_id)

        db.commit()
